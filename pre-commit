#!/usr/bin/python
"""
Git hook to catch pyflakes issues before committing.
copy file to '/usr/share/git-core/templates/hooks/' then,
It will automatically get placed in hooks on each clone
"""
__author__ = 'yavinash'

import subprocess
import re
import os
from sys import exit

EXCLUDE_PATTERNS = "import\s+\*"
TOOLS = ['pyflakes', 'pep8']

def get_staged_files():
    """
    get all staged files for next commit
    """
    proc = subprocess.Popen(('git', 'status', '--porcelain'), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, _ = proc.communicate()
    staged_files = re.findall(r'^[AM]\s+(.*\.py)', out, re.MULTILINE)
    return staged_files


def validate_with_analysis_tools():
    """
    validates staged file with analysis tool and
    generates report
    """
    issue_dict = {}
    staged_files = get_staged_files()
    for tool in TOOLS:
        report = ""
        for each_staged_files in staged_files:
            proc2 = subprocess.Popen(
                [tool, os.path.abspath(each_staged_files)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            report += proc2.communicate()[0]
        issue_dict.setdefault(tool, []).extend(
            [issue for issue in report.splitlines() if not re.findall(EXCLUDE_PATTERNS, issue)])
    if any(issue_dict.values()):
        print '\033[95m' + "***** Commit failed due to below pyflakes / pep8 errors *****\n" + '\033[0m'
        for k, v in issue_dict.iteritems():
            print '\033[94m'  + "############ %s ################" % k + '\033[0m'
            print "\n".join(v)
        exit(1)

if __name__ == '__main__':
    validate_with_analysis_tools()
